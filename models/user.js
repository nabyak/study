var mongoose  = require('mongoose');

// bcrypt is used for hashing password.
var bcrypt = require('bcrypt-nodejs');
var Schema = mongoose.Schema;

// The user schema attributes / characterisitics / fields
var UserSchema = new Schema({
  email: { type: String , unique: true, lowercase: true},
  password: String,
  profile: {
    name:{ type: String, default:''},
    picture: { type: String , default:''}
  },
  address: String,
  history:[{
    date: Date,
    paid: {type: Number, default: 0},
    // item: (type: Schema)
  }]
})

// Hash the password before we save it to the database
// Things to do before saving the password
UserSchema.pre("save", function(next){
  //Resent object created
  var user = this;
  if(!user.isModified('password')) return next();
  // salt is a random data generated by the bcrypt library
  bcrypt.genSalt(10, function(err, salt){
    if(err) return next(err);
    bcrypt.hash(user.password, salt, null/* This is to know the progress*/, function(err, hash){
      if(err) return next(err);
      user.password = hash;
      next();// returning success
    });
  });
});

/* compare password in the database and the one that user type in.*/
UserSchema.methods.comparePasswords = function(password){
  return bcrypt.compareSync(password, this.password);
}

// This is to enable other files to use this User and UserSchema
module.exports = mongoose.model('User', UserSchema);
